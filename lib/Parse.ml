(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_sml"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "block_comment";
  "line_comment";
]

let children_regexps : (string * Run.exp option) list = [
  "pat_dcab316", None;
  "pat_213dc3e", None;
  "unit_pat",
  Some (
    Seq [
      Token (Literal "(");
      Token (Literal ")");
    ];
  );
  "wildcard_pat", None;
  "tok_semi", None;
  "primealphanumeric_ident", None;
  "semgrep_metavariable", None;
  "semgrep_ellipsis", None;
  "tok_comma", None;
  "tok_pat_6ca5299", None;
  "string_scon", None;
  "real_scon", None;
  "tok_bar", None;
  "block_comment", None;
  "word_scon", None;
  "symbolic_ident", None;
  "line_comment", None;
  "integer_scon", None;
  "char_scon", None;
  "unit_exp",
  Some (
    Seq [
      Token (Literal "(");
      Token (Literal ")");
    ];
  );
  "tyvar",
  Some (
    Alt [|
      Token (Name "primealphanumeric_ident");
    |];
  );
  "alphaalphanumeric_ident",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "tok_pat_6ca5299");
    |];
  );
  "scon",
  Some (
    Alt [|
      Token (Name "integer_scon");
      Token (Name "word_scon");
      Token (Name "real_scon");
      Token (Name "string_scon");
      Token (Name "char_scon");
    |];
  );
  "tyvarseq",
  Some (
    Alt [|
      Token (Name "tyvar");
      Seq [
        Token (Literal "(");
        Nothing;
        Nothing;
        Token (Name "tyvar");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "tyvar");
          ];
        );
        Token (Literal ")");
      ];
    |];
  );
  "tyvar_ty", Some (Token (Name "tyvar"););
  "strid",
  Some (
    Alt [|
      Token (Name "alphaalphanumeric_ident");
    |];
  );
  "tycon",
  Some (
    Alt [|
      Token (Name "alphaalphanumeric_ident");
      Token (Name "symbolic_ident");
    |];
  );
  "lab",
  Some (
    Alt [|
      Token (Name "alphaalphanumeric_ident");
      Token (Name "symbolic_ident");
      Token (Name "pat_dcab316");
    |];
  );
  "fctid",
  Some (
    Alt [|
      Token (Name "alphaalphanumeric_ident");
    |];
  );
  "sigid",
  Some (
    Alt [|
      Token (Name "alphaalphanumeric_ident");
    |];
  );
  "vid",
  Some (
    Alt [|
      Token (Name "alphaalphanumeric_ident");
      Token (Name "symbolic_ident");
    |];
  );
  "scon_exp", Some (Token (Name "scon"););
  "scon_pat", Some (Token (Name "scon"););
  "longstrid",
  Some (
    Seq [
      Repeat (
        Seq [
          Token (Name "strid");
          Token (Literal ".");
        ];
      );
      Token (Name "strid");
    ];
  );
  "longtycon",
  Some (
    Seq [
      Repeat (
        Seq [
          Token (Name "strid");
          Token (Literal ".");
        ];
      );
      Token (Name "tycon");
    ];
  );
  "typedesc_",
  Some (
    Seq [
      Opt (
        Token (Name "tyvarseq");
      );
      Token (Name "tycon");
    ];
  );
  "recordsel_exp",
  Some (
    Seq [
      Token (Literal "#");
      Token (Name "lab");
    ];
  );
  "sigid_sigexp", Some (Token (Name "sigid"););
  "infixr_dec",
  Some (
    Seq [
      Token (Literal "infixr");
      Opt (
        Token (Name "pat_213dc3e");
      );
      Repeat1 (
        Token (Name "vid");
      );
    ];
  );
  "nonfix_dec",
  Some (
    Seq [
      Token (Literal "nonfix");
      Repeat1 (
        Token (Name "vid");
      );
    ];
  );
  "infix_dec",
  Some (
    Seq [
      Token (Literal "infix");
      Opt (
        Token (Name "pat_213dc3e");
      );
      Repeat1 (
        Token (Name "vid");
      );
    ];
  );
  "longvid",
  Some (
    Seq [
      Repeat (
        Seq [
          Token (Name "strid");
          Token (Literal ".");
        ];
      );
      Token (Name "vid");
    ];
  );
  "strid_strexp", Some (Token (Name "longstrid"););
  "sharing_spec",
  Some (
    Seq [
      Token (Literal "sharing");
      Nothing;
      Nothing;
      Token (Name "longstrid");
      Token (Literal "=");
      Token (Name "longstrid");
      Repeat (
        Seq [
          Token (Literal "=");
          Token (Name "longstrid");
        ];
      );
    ];
  );
  "open_dec",
  Some (
    Seq [
      Token (Literal "open");
      Repeat1 (
        Token (Name "longstrid");
      );
    ];
  );
  "atty",
  Some (
    Alt [|
      Token (Name "tyvar_ty");
      Token (Name "record_ty");
      Token (Name "tycon_ty");
    |];
  );
  "ellipsis_tyrow",
  Some (
    Seq [
      Token (Literal "...");
      Token (Literal ":");
      Token (Name "ty");
    ];
  );
  "fn_ty",
  Some (
    Alt [|
      Token (Name "fn_ty_");
      Token (Name "tuple_ty");
    |];
  );
  "fn_ty_",
  Some (
    Seq [
      Token (Name "tuple_ty");
      Token (Literal "->");
      Token (Name "fn_ty");
    ];
  );
  "paren_ty",
  Some (
    Alt [|
      Token (Name "paren_ty_");
      Token (Name "atty");
    |];
  );
  "paren_ty_",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "ty");
      Token (Literal ")");
    ];
  );
  "record_ty",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Repeat1 (
          Token (Name "tok_comma");
        );
      );
      Alt [|
        Opt (
          Seq [
            Token (Name "ellipsis_tyrow");
            Opt (
              Repeat1 (
                Token (Name "tok_comma");
              );
            );
          ];
        );
        Seq [
          Token (Name "tyrow");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "tyrow");
            ];
          );
          Opt (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "ellipsis_tyrow");
              Opt (
                Repeat1 (
                  Token (Name "tok_comma");
                );
              );
            ];
          );
        ];
      |];
      Token (Literal "}");
    ];
  );
  "tuple_ty",
  Some (
    Alt [|
      Token (Name "tuple_ty_");
      Token (Name "paren_ty");
    |];
  );
  "tuple_ty_",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "paren_ty");
      Token (Literal "*");
      Token (Name "paren_ty");
      Repeat (
        Seq [
          Token (Literal "*");
          Token (Name "paren_ty");
        ];
      );
    ];
  );
  "ty", Some (Token (Name "fn_ty"););
  "tycon_ty",
  Some (
    Seq [
      Opt (
        Token (Name "tyseq");
      );
      Token (Name "longtycon");
    ];
  );
  "tyrow",
  Some (
    Seq [
      Token (Name "lab");
      Token (Literal ":");
      Token (Name "ty");
    ];
  );
  "tyseq",
  Some (
    Alt [|
      Token (Name "atty");
      Seq [
        Token (Literal "(");
        Nothing;
        Nothing;
        Token (Name "ty");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "ty");
          ];
        );
        Token (Literal ")");
      ];
    |];
  );
  "datarepl_dec",
  Some (
    Seq [
      Token (Literal "datatype");
      Token (Name "tycon");
      Token (Literal "=");
      Token (Literal "datatype");
      Token (Name "longtycon");
    ];
  );
  "datarepl_spec",
  Some (
    Seq [
      Token (Literal "datatype");
      Token (Name "tycon");
      Token (Literal "=");
      Token (Literal "datatype");
      Token (Name "longtycon");
    ];
  );
  "sharingtype_spec",
  Some (
    Seq [
      Token (Literal "sharing");
      Token (Literal "type");
      Nothing;
      Nothing;
      Token (Name "longtycon");
      Token (Literal "=");
      Token (Name "longtycon");
      Repeat (
        Seq [
          Token (Literal "=");
          Token (Name "longtycon");
        ];
      );
    ];
  );
  "typedesc",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "typedesc_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "typedesc_");
        ];
      );
    ];
  );
  "vid_exp",
  Some (
    Seq [
      Opt (
        Token (Literal "op");
      );
      Token (Name "longvid");
    ];
  );
  "vid_pat",
  Some (
    Seq [
      Opt (
        Token (Literal "op");
      );
      Token (Name "longvid");
    ];
  );
  "typbind_",
  Some (
    Seq [
      Opt (
        Token (Name "tyvarseq");
      );
      Token (Name "tycon");
      Token (Literal "=");
      Token (Name "ty");
    ];
  );
  "exdesc_",
  Some (
    Seq [
      Token (Name "vid");
      Opt (
        Seq [
          Token (Literal "of");
          Token (Name "ty");
        ];
      );
    ];
  );
  "condesc_",
  Some (
    Seq [
      Token (Name "vid");
      Opt (
        Seq [
          Token (Literal "of");
          Token (Name "ty");
        ];
      );
    ];
  );
  "exbind_",
  Some (
    Alt [|
      Seq [
        Opt (
          Token (Literal "op");
        );
        Token (Name "vid");
        Opt (
          Seq [
            Token (Literal "of");
            Token (Name "ty");
          ];
        );
      ];
      Seq [
        Opt (
          Token (Literal "op");
        );
        Token (Name "vid");
        Token (Literal "=");
        Opt (
          Token (Literal "op");
        );
        Token (Name "longvid");
      ];
    |];
  );
  "labvar_exprow",
  Some (
    Seq [
      Token (Name "vid");
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "ty");
        ];
      );
    ];
  );
  "valdesc_",
  Some (
    Seq [
      Token (Name "vid");
      Token (Literal ":");
      Token (Name "ty");
    ];
  );
  "conbind_",
  Some (
    Seq [
      Opt (
        Token (Literal "op");
      );
      Token (Name "vid");
      Opt (
        Seq [
          Token (Literal "of");
          Token (Name "ty");
        ];
      );
    ];
  );
  "eqtype_spec",
  Some (
    Seq [
      Token (Literal "eqtype");
      Token (Name "typedesc");
    ];
  );
  "app_pat",
  Some (
    Seq [
      Token (Name "atpat");
      Repeat1 (
        Token (Name "atpat");
      );
    ];
  );
  "atpat",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Alt [|
        Token (Name "wildcard_pat");
        Token (Name "scon_pat");
        Token (Name "vid_pat");
        Token (Name "record_pat");
        Token (Name "unit_pat");
        Token (Name "tuple_pat");
        Token (Name "list_pat");
        Token (Name "vec_pat");
        Token (Name "paren_pat");
      |];
    |];
  );
  "conj_pat",
  Some (
    Seq [
      Token (Name "pat");
      Token (Literal "as");
      Token (Name "pat");
    ];
  );
  "disj_pat",
  Some (
    Seq [
      Token (Name "pat");
      Token (Literal "|");
      Token (Name "pat");
    ];
  );
  "ellipsis_listpat",
  Some (
    Seq [
      Token (Literal "...");
      Token (Literal "=");
      Token (Name "pat");
    ];
  );
  "ellipsis_patrow",
  Some (
    Seq [
      Token (Literal "...");
      Opt (
        Seq [
          Token (Literal "=");
          Token (Name "pat");
        ];
      );
    ];
  );
  "labvar_patrow",
  Some (
    Seq [
      Token (Name "vid");
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "ty");
        ];
      );
      Opt (
        Seq [
          Token (Literal "as");
          Token (Name "pat");
        ];
      );
    ];
  );
  "list_pat",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Repeat1 (
          Token (Name "tok_comma");
        );
      );
      Alt [|
        Opt (
          Seq [
            Token (Name "ellipsis_listpat");
            Opt (
              Repeat1 (
                Token (Name "tok_comma");
              );
            );
          ];
        );
        Seq [
          Token (Name "pat");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "pat");
            ];
          );
          Opt (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "ellipsis_listpat");
              Opt (
                Repeat1 (
                  Token (Name "tok_comma");
                );
              );
            ];
          );
        ];
      |];
      Token (Literal "]");
    ];
  );
  "paren_pat",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "pat");
      Token (Literal ")");
    ];
  );
  "pat",
  Some (
    Alt [|
      Token (Name "atpat");
      Token (Name "app_pat");
      Token (Name "typed_pat");
      Token (Name "conj_pat");
      Token (Name "disj_pat");
    |];
  );
  "patrow",
  Some (
    Alt [|
      Token (Name "patrow_");
      Token (Name "labvar_patrow");
    |];
  );
  "patrow_",
  Some (
    Seq [
      Token (Name "lab");
      Token (Literal "=");
      Token (Name "pat");
    ];
  );
  "record_pat",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Repeat1 (
          Token (Name "tok_comma");
        );
      );
      Alt [|
        Opt (
          Seq [
            Token (Name "ellipsis_patrow");
            Opt (
              Repeat1 (
                Token (Name "tok_comma");
              );
            );
          ];
        );
        Seq [
          Token (Name "patrow");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "patrow");
            ];
          );
          Opt (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "ellipsis_patrow");
              Opt (
                Repeat1 (
                  Token (Name "tok_comma");
                );
              );
            ];
          );
        ];
      |];
      Token (Literal "}");
    ];
  );
  "tuple_pat",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Repeat1 (
          Token (Name "tok_comma");
        );
      );
      Alt [|
        Nothing;
        Seq [
          Token (Name "pat");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "pat");
            ];
          );
          Opt (
            Repeat1 (
              Token (Name "tok_comma");
            );
          );
        ];
      |];
      Token (Literal ")");
    ];
  );
  "typed_pat",
  Some (
    Seq [
      Token (Name "pat");
      Token (Literal ":");
      Token (Name "ty");
    ];
  );
  "vec_pat",
  Some (
    Seq [
      Token (Literal "#[");
      Opt (
        Repeat1 (
          Token (Name "tok_comma");
        );
      );
      Alt [|
        Nothing;
        Seq [
          Token (Name "pat");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "pat");
            ];
          );
          Opt (
            Repeat1 (
              Token (Name "tok_comma");
            );
          );
        ];
      |];
      Token (Literal ")");
    ];
  );
  "typbind",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "typbind_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "typbind_");
        ];
      );
    ];
  );
  "exdesc",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "exdesc_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "exdesc_");
        ];
      );
    ];
  );
  "condesc",
  Some (
    Seq [
      Opt (
        Token (Name "tok_bar");
      );
      Nothing;
      Nothing;
      Token (Name "condesc_");
      Repeat (
        Seq [
          Token (Literal "|");
          Token (Name "condesc_");
        ];
      );
    ];
  );
  "exbind",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "exbind_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "exbind_");
        ];
      );
    ];
  );
  "valdesc",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "valdesc_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "valdesc_");
        ];
      );
    ];
  );
  "conbind",
  Some (
    Seq [
      Opt (
        Token (Name "tok_bar");
      );
      Nothing;
      Nothing;
      Token (Name "conbind_");
      Repeat (
        Seq [
          Token (Literal "|");
          Token (Name "conbind_");
        ];
      );
    ];
  );
  "type_spec",
  Some (
    Seq [
      Token (Literal "type");
      Alt [|
        Token (Name "typedesc");
        Token (Name "typbind");
      |];
    ];
  );
  "type_dec",
  Some (
    Seq [
      Token (Literal "type");
      Token (Name "typbind");
    ];
  );
  "exception_spec",
  Some (
    Seq [
      Token (Literal "exception");
      Token (Name "exdesc");
    ];
  );
  "datdesc_",
  Some (
    Seq [
      Opt (
        Token (Name "tyvarseq");
      );
      Token (Name "tycon");
      Token (Literal "=");
      Token (Name "condesc");
    ];
  );
  "exception_dec",
  Some (
    Seq [
      Token (Literal "exception");
      Token (Name "exbind");
    ];
  );
  "val_spec",
  Some (
    Seq [
      Token (Literal "val");
      Token (Name "valdesc");
    ];
  );
  "datbind_",
  Some (
    Seq [
      Opt (
        Token (Name "tyvarseq");
      );
      Token (Name "tycon");
      Token (Literal "=");
      Token (Name "conbind");
    ];
  );
  "datdesc",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "datdesc_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "datdesc_");
        ];
      );
    ];
  );
  "datbind",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "datbind_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "datbind_");
        ];
      );
    ];
  );
  "datatype_spec",
  Some (
    Seq [
      Token (Literal "datatype");
      Token (Name "datdesc");
      Opt (
        Seq [
          Token (Literal "withtype");
          Token (Name "typbind");
        ];
      );
    ];
  );
  "datatype_dec",
  Some (
    Seq [
      Token (Literal "datatype");
      Token (Name "datbind");
      Opt (
        Seq [
          Token (Literal "withtype");
          Token (Name "typbind");
        ];
      );
    ];
  );
  "include_spec",
  Some (
    Seq [
      Token (Literal "include");
      Alt [|
        Token (Name "sigexp");
        Seq [
          Token (Name "sigid");
          Repeat1 (
            Token (Name "sigid");
          );
        ];
      |];
    ];
  );
  "sig_sigexp",
  Some (
    Seq [
      Token (Literal "sig");
      Repeat (
        Alt [|
          Token (Literal ";");
          Token (Name "spec");
        |];
      );
      Token (Literal "end");
    ];
  );
  "sigexp",
  Some (
    Alt [|
      Token (Name "sig_sigexp");
      Token (Name "sigid_sigexp");
      Token (Name "wheretype_sigexp");
    |];
  );
  "spec",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Alt [|
        Token (Name "val_spec");
        Token (Name "type_spec");
        Token (Name "eqtype_spec");
        Token (Name "datatype_spec");
        Token (Name "datarepl_spec");
        Token (Name "exception_spec");
        Token (Name "structure_spec");
        Token (Name "include_spec");
        Token (Name "sharingtype_spec");
        Token (Name "sharing_spec");
      |];
    |];
  );
  "strdesc",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "strdesc_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "strdesc_");
        ];
      );
    ];
  );
  "strdesc_",
  Some (
    Seq [
      Token (Name "strid");
      Token (Literal ":");
      Token (Name "sigexp");
    ];
  );
  "structure_spec",
  Some (
    Seq [
      Token (Literal "structure");
      Token (Name "strdesc");
    ];
  );
  "wheretype_sigexp",
  Some (
    Seq [
      Token (Name "sigexp");
      Token (Literal "where");
      Nothing;
      Nothing;
      Token (Literal "type");
      Opt (
        Token (Name "tyvarseq");
      );
      Token (Name "longtycon");
      Token (Literal "=");
      Token (Name "ty");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Literal "type");
          Opt (
            Token (Name "tyvarseq");
          );
          Token (Name "longtycon");
          Token (Literal "=");
          Token (Name "ty");
        ];
      );
    ];
  );
  "abstype_dec",
  Some (
    Seq [
      Token (Literal "abstype");
      Token (Name "datbind");
      Opt (
        Seq [
          Token (Literal "withtype");
          Token (Name "typbind");
        ];
      );
      Token (Literal "with");
      Repeat (
        Alt [|
          Token (Literal ";");
          Token (Name "dec");
        |];
      );
      Token (Literal "end");
    ];
  );
  "app_exp",
  Some (
    Seq [
      Token (Name "atexp");
      Repeat1 (
        Token (Name "atexp");
      );
    ];
  );
  "atexp",
  Some (
    Alt [|
      Token (Name "scon_exp");
      Token (Name "vid_exp");
      Token (Name "record_exp");
      Token (Name "recordsel_exp");
      Token (Name "unit_exp");
      Token (Name "tuple_exp");
      Token (Name "list_exp");
      Token (Name "vec_exp");
      Token (Name "sequence_exp");
      Token (Name "let_exp");
      Token (Name "paren_exp");
    |];
  );
  "case_exp",
  Some (
    Seq [
      Token (Literal "case");
      Token (Name "exp");
      Token (Literal "of");
      Token (Name "match");
    ];
  );
  "cond_exp",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "exp");
      Token (Literal "then");
      Token (Name "exp");
      Opt (
        Seq [
          Token (Literal "else");
          Token (Name "exp");
        ];
      );
    ];
  );
  "conj_exp",
  Some (
    Seq [
      Token (Name "exp");
      Token (Literal "andalso");
      Token (Name "exp");
    ];
  );
  "dec",
  Some (
    Alt [|
      Token (Name "dec_no_local");
      Token (Name "local_dec");
    |];
  );
  "dec_no_local",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Alt [|
        Token (Name "do_dec");
        Token (Name "val_dec");
        Token (Name "fun_dec");
        Token (Name "type_dec");
        Token (Name "datatype_dec");
        Token (Name "datarepl_dec");
        Token (Name "abstype_dec");
        Token (Name "exception_dec");
        Token (Name "open_dec");
        Token (Name "infix_dec");
        Token (Name "infixr_dec");
        Token (Name "nonfix_dec");
      |];
    |];
  );
  "disj_exp",
  Some (
    Seq [
      Token (Name "exp");
      Token (Literal "orelse");
      Token (Name "exp");
    ];
  );
  "do_dec",
  Some (
    Seq [
      Token (Literal "do");
      Token (Name "exp");
    ];
  );
  "ellipsis_exprow",
  Some (
    Seq [
      Token (Literal "...");
      Token (Literal "=");
      Token (Name "exp");
    ];
  );
  "ellipsis_listexp",
  Some (
    Seq [
      Token (Literal "...");
      Token (Literal "=");
      Token (Name "exp");
    ];
  );
  "exp",
  Some (
    Alt [|
      Token (Name "atexp");
      Token (Name "app_exp");
      Token (Name "typed_exp");
      Token (Name "conj_exp");
      Token (Name "disj_exp");
      Token (Name "handle_exp");
      Token (Name "raise_exp");
      Token (Name "cond_exp");
      Token (Name "iter_exp");
      Token (Name "case_exp");
      Token (Name "fn_exp");
    |];
  );
  "exprow",
  Some (
    Alt [|
      Token (Name "exprow_");
      Token (Name "labvar_exprow");
    |];
  );
  "exprow_",
  Some (
    Seq [
      Token (Name "lab");
      Token (Literal "=");
      Token (Name "exp");
    ];
  );
  "fmatch",
  Some (
    Seq [
      Opt (
        Token (Name "tok_bar");
      );
      Nothing;
      Nothing;
      Token (Name "fmrule");
      Repeat (
        Seq [
          Token (Literal "|");
          Token (Name "fmrule");
        ];
      );
    ];
  );
  "fmrule",
  Some (
    Seq [
      Alt [|
        Seq [
          Opt (
            Token (Literal "op");
          );
          Token (Name "vid");
          Repeat1 (
            Token (Name "atpat");
          );
        ];
        Seq [
          Token (Literal "(");
          Token (Name "atpat");
          Token (Name "vid");
          Token (Name "atpat");
          Token (Literal ")");
          Repeat (
            Token (Name "atpat");
          );
        ];
        Seq [
          Token (Name "atpat");
          Token (Name "vid");
          Token (Name "atpat");
        ];
      |];
      Opt (
        Seq [
          Token (Literal ":");
          Token (Name "ty");
        ];
      );
      Token (Literal "=");
      Token (Name "exp");
    ];
  );
  "fn_exp",
  Some (
    Seq [
      Token (Literal "fn");
      Token (Name "match");
    ];
  );
  "fun_dec",
  Some (
    Seq [
      Token (Literal "fun");
      Opt (
        Token (Name "tyvarseq");
      );
      Token (Name "fvalbind");
    ];
  );
  "fvalbind",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "fvalbind_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "fvalbind_");
        ];
      );
    ];
  );
  "fvalbind_", Some (Token (Name "fmatch"););
  "handle_exp",
  Some (
    Seq [
      Token (Name "exp");
      Token (Literal "handle");
      Token (Name "match");
    ];
  );
  "iter_exp",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "exp");
      Token (Literal "do");
      Token (Name "exp");
    ];
  );
  "let_exp",
  Some (
    Seq [
      Token (Literal "let");
      Repeat (
        Alt [|
          Token (Literal ";");
          Token (Name "dec");
        |];
      );
      Token (Literal "in");
      Opt (
        Repeat1 (
          Token (Name "tok_semi");
        );
      );
      Nothing;
      Token (Name "exp");
      Repeat (
        Seq [
          Repeat1 (
            Token (Name "tok_semi");
          );
          Token (Name "exp");
        ];
      );
      Opt (
        Repeat1 (
          Token (Name "tok_semi");
        );
      );
      Token (Literal "end");
    ];
  );
  "list_exp",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Repeat1 (
          Token (Name "tok_comma");
        );
      );
      Alt [|
        Opt (
          Seq [
            Token (Name "ellipsis_listexp");
            Opt (
              Repeat1 (
                Token (Name "tok_comma");
              );
            );
          ];
        );
        Seq [
          Token (Name "exp");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "exp");
            ];
          );
          Opt (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "ellipsis_listexp");
              Opt (
                Repeat1 (
                  Token (Name "tok_comma");
                );
              );
            ];
          );
        ];
      |];
      Token (Literal "]");
    ];
  );
  "local_dec",
  Some (
    Seq [
      Token (Literal "local");
      Repeat (
        Alt [|
          Token (Literal ";");
          Token (Name "dec");
        |];
      );
      Token (Literal "in");
      Repeat (
        Alt [|
          Token (Literal ";");
          Token (Name "dec");
        |];
      );
      Token (Literal "end");
    ];
  );
  "match",
  Some (
    Seq [
      Opt (
        Token (Name "tok_bar");
      );
      Nothing;
      Nothing;
      Token (Name "mrule");
      Repeat (
        Seq [
          Token (Literal "|");
          Token (Name "mrule");
        ];
      );
    ];
  );
  "mrule",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Seq [
        Token (Name "pat");
        Token (Literal "=>");
        Token (Name "exp");
      ];
    |];
  );
  "paren_exp",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "exp");
      Token (Literal ")");
    ];
  );
  "raise_exp",
  Some (
    Seq [
      Token (Literal "raise");
      Token (Name "exp");
    ];
  );
  "record_exp",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Repeat1 (
          Token (Name "tok_comma");
        );
      );
      Alt [|
        Opt (
          Seq [
            Token (Name "ellipsis_exprow");
            Opt (
              Repeat1 (
                Token (Name "tok_comma");
              );
            );
          ];
        );
        Seq [
          Token (Name "exprow");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "exprow");
            ];
          );
          Opt (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "ellipsis_exprow");
              Opt (
                Repeat1 (
                  Token (Name "tok_comma");
                );
              );
            ];
          );
        ];
      |];
      Token (Literal "}");
    ];
  );
  "sequence_exp",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Repeat1 (
          Token (Name "tok_semi");
        );
      );
      Alt [|
        Nothing;
        Seq [
          Token (Name "exp");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_semi");
              );
              Token (Name "exp");
            ];
          );
          Opt (
            Repeat1 (
              Token (Name "tok_semi");
            );
          );
        ];
      |];
      Token (Literal ")");
    ];
  );
  "tuple_exp",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Repeat1 (
          Token (Name "tok_comma");
        );
      );
      Alt [|
        Nothing;
        Seq [
          Token (Name "exp");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "exp");
            ];
          );
          Opt (
            Repeat1 (
              Token (Name "tok_comma");
            );
          );
        ];
      |];
      Token (Literal ")");
    ];
  );
  "typed_exp",
  Some (
    Seq [
      Token (Name "exp");
      Token (Literal ":");
      Token (Name "ty");
    ];
  );
  "val_dec",
  Some (
    Seq [
      Token (Literal "val");
      Opt (
        Token (Literal "rec");
      );
      Opt (
        Token (Name "tyvarseq");
      );
      Token (Name "valbind");
    ];
  );
  "valbind",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "valbind_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "valbind_");
        ];
      );
    ];
  );
  "valbind_",
  Some (
    Seq [
      Token (Name "pat");
      Token (Literal "=");
      Token (Name "exp");
    ];
  );
  "vec_exp",
  Some (
    Seq [
      Token (Literal "#[");
      Opt (
        Repeat1 (
          Token (Name "tok_comma");
        );
      );
      Alt [|
        Nothing;
        Seq [
          Token (Name "exp");
          Repeat (
            Seq [
              Repeat1 (
                Token (Name "tok_comma");
              );
              Token (Name "exp");
            ];
          );
          Opt (
            Repeat1 (
              Token (Name "tok_comma");
            );
          );
        ];
      |];
      Token (Literal "]");
    ];
  );
  "sigbind_",
  Some (
    Seq [
      Token (Name "sigid");
      Token (Literal "=");
      Token (Name "sigexp");
    ];
  );
  "constr_strexp",
  Some (
    Seq [
      Token (Name "strexp");
      Alt [|
        Token (Literal ":");
        Token (Literal ":>");
      |];
      Token (Name "sigexp");
    ];
  );
  "fctapp_strexp",
  Some (
    Seq [
      Token (Name "fctid");
      Token (Literal "(");
      Alt [|
        Token (Name "strexp");
        Repeat (
          Alt [|
            Token (Literal ";");
            Token (Name "strdec");
          |];
        );
      |];
      Token (Literal ")");
    ];
  );
  "let_strexp",
  Some (
    Seq [
      Token (Literal "let");
      Repeat (
        Alt [|
          Token (Literal ";");
          Token (Name "strdec");
        |];
      );
      Token (Literal "in");
      Token (Name "strexp");
      Token (Literal "end");
    ];
  );
  "local_strdec",
  Some (
    Seq [
      Token (Literal "local");
      Repeat (
        Alt [|
          Token (Literal ";");
          Token (Name "strdec");
        |];
      );
      Token (Literal "in");
      Repeat (
        Alt [|
          Token (Literal ";");
          Token (Name "strdec");
        |];
      );
      Token (Literal "end");
    ];
  );
  "strbind",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "strbind_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "strbind_");
        ];
      );
    ];
  );
  "strbind_",
  Some (
    Seq [
      Token (Name "strid");
      Opt (
        Seq [
          Alt [|
            Token (Literal ":");
            Token (Literal ":>");
          |];
          Token (Name "sigexp");
        ];
      );
      Token (Literal "=");
      Token (Name "strexp");
    ];
  );
  "strdec",
  Some (
    Alt [|
      Token (Name "dec_no_local");
      Token (Name "structure_strdec");
      Token (Name "local_strdec");
    |];
  );
  "strexp",
  Some (
    Alt [|
      Token (Name "struct_strexp");
      Token (Name "strid_strexp");
      Token (Name "constr_strexp");
      Token (Name "fctapp_strexp");
      Token (Name "let_strexp");
    |];
  );
  "struct_strexp",
  Some (
    Seq [
      Token (Literal "struct");
      Repeat (
        Alt [|
          Token (Literal ";");
          Token (Name "strdec");
        |];
      );
      Token (Literal "end");
    ];
  );
  "structure_strdec",
  Some (
    Seq [
      Token (Literal "structure");
      Token (Name "strbind");
    ];
  );
  "sigbind",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "sigbind_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "sigbind_");
        ];
      );
    ];
  );
  "fctbind_",
  Some (
    Seq [
      Token (Name "fctid");
      Token (Literal "(");
      Alt [|
        Seq [
          Token (Name "strid");
          Token (Literal ":");
          Token (Name "sigexp");
        ];
        Repeat (
          Alt [|
            Token (Literal ";");
            Token (Name "spec");
          |];
        );
      |];
      Token (Literal ")");
      Opt (
        Seq [
          Alt [|
            Token (Literal ":");
            Token (Literal ":>");
          |];
          Token (Name "sigexp");
        ];
      );
      Token (Literal "=");
      Token (Name "strexp");
    ];
  );
  "signature_sigdec",
  Some (
    Seq [
      Token (Literal "signature");
      Token (Name "sigbind");
    ];
  );
  "fctbind",
  Some (
    Seq [
      Nothing;
      Nothing;
      Token (Name "fctbind_");
      Repeat (
        Seq [
          Token (Literal "and");
          Token (Name "fctbind_");
        ];
      );
    ];
  );
  "sigdec",
  Some (
    Alt [|
      Token (Name "signature_sigdec");
    |];
  );
  "fctdec",
  Some (
    Seq [
      Token (Literal "functor");
      Token (Name "fctbind");
    ];
  );
  "topdec",
  Some (
    Alt [|
      Token (Name "strdec");
      Token (Name "sigdec");
      Token (Name "fctdec");
    |];
  );
  "program",
  Some (
    Alt [|
      Seq [
        Alt [|
          Repeat1 (
            Token (Name "topdec");
          );
          Token (Name "exp");
        |];
        Opt (
          Seq [
            Token (Literal ";");
            Opt (
              Token (Name "program");
            );
          ];
        );
      ];
    |];
  );
  "source_file",
  Some (
    Opt (
      Token (Name "program");
    );
  );
]

let trans_pat_dcab316 ((kind, body) : mt) : CST.pat_dcab316 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_213dc3e ((kind, body) : mt) : CST.pat_213dc3e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unit_pat ((kind, body) : mt) : CST.unit_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_wildcard_pat ((kind, body) : mt) : CST.wildcard_pat =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_semi ((kind, body) : mt) : CST.tok_semi =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_primealphanumeric_ident ((kind, body) : mt) : CST.primealphanumeric_ident =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavariable ((kind, body) : mt) : CST.semgrep_metavariable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_semgrep_ellipsis ((kind, body) : mt) : CST.semgrep_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_comma ((kind, body) : mt) : CST.tok_comma =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_pat_6ca5299 ((kind, body) : mt) : CST.tok_pat_6ca5299 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_scon ((kind, body) : mt) : CST.string_scon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_real_scon ((kind, body) : mt) : CST.real_scon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_tok_bar ((kind, body) : mt) : CST.tok_bar =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_block_comment ((kind, body) : mt) : CST.block_comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_word_scon ((kind, body) : mt) : CST.word_scon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_symbolic_ident ((kind, body) : mt) : CST.symbolic_ident =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_line_comment ((kind, body) : mt) : CST.line_comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_integer_scon ((kind, body) : mt) : CST.integer_scon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_char_scon ((kind, body) : mt) : CST.char_scon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unit_exp ((kind, body) : mt) : CST.unit_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_tyvar ((kind, body) : mt) : CST.tyvar =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Prim_id (
            trans_primealphanumeric_ident (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_alphaalphanumeric_ident ((kind, body) : mt) : CST.alphaalphanumeric_ident =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Tok_pat_6ca5299 (
            trans_tok_pat_6ca5299 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_scon ((kind, body) : mt) : CST.scon =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Int_scon (
            trans_integer_scon (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Word_scon (
            trans_word_scon (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Real_scon (
            trans_real_scon (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Str_scon (
            trans_string_scon (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Char_scon (
            trans_char_scon (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_tyvarseq ((kind, body) : mt) : CST.tyvarseq =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tyvar (
            trans_tyvar (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `LPAR_blank_blank_tyvar_rep_COMMA_tyvar_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.nothing v1,
                  Run.nothing v2,
                  trans_tyvar (Run.matcher_token v3),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_tyvar (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v4
                  ,
                  Run.trans_token (Run.matcher_token v5)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_tyvar_ty ((kind, body) : mt) : CST.tyvar_ty =
  match body with
  | Children v ->
      trans_tyvar (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_strid ((kind, body) : mt) : CST.strid =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Alph_id (
            trans_alphaalphanumeric_ident (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_tycon ((kind, body) : mt) : CST.tycon =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Alph_id (
            trans_alphaalphanumeric_ident (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Symb_id (
            trans_symbolic_ident (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_lab ((kind, body) : mt) : CST.lab =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Alph_id (
            trans_alphaalphanumeric_ident (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Symb_id (
            trans_symbolic_ident (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Pat_dcab316 (
            trans_pat_dcab316 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_fctid ((kind, body) : mt) : CST.fctid =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Alph_id (
            trans_alphaalphanumeric_ident (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_sigid ((kind, body) : mt) : CST.sigid =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Alph_id (
            trans_alphaalphanumeric_ident (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_vid ((kind, body) : mt) : CST.vid =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Alph_id (
            trans_alphaalphanumeric_ident (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Symb_id (
            trans_symbolic_ident (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_scon_exp ((kind, body) : mt) : CST.scon_exp =
  match body with
  | Children v ->
      trans_scon (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_scon_pat ((kind, body) : mt) : CST.scon_pat =
  match body with
  | Children v ->
      trans_scon (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_longstrid ((kind, body) : mt) : CST.longstrid =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_strid (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_strid (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_longtycon ((kind, body) : mt) : CST.longtycon =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_strid (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_tycon (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_typedesc_ ((kind, body) : mt) : CST.typedesc_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_tyvarseq (Run.matcher_token v))
              v0
            ,
            trans_tycon (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_recordsel_exp ((kind, body) : mt) : CST.recordsel_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_lab (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_sigid_sigexp ((kind, body) : mt) : CST.sigid_sigexp =
  match body with
  | Children v ->
      trans_sigid (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_infixr_dec ((kind, body) : mt) : CST.infixr_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_pat_213dc3e (Run.matcher_token v))
              v1
            ,
            Run.repeat1
              (fun v -> trans_vid (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_nonfix_dec ((kind, body) : mt) : CST.nonfix_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_vid (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_infix_dec ((kind, body) : mt) : CST.infix_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_pat_213dc3e (Run.matcher_token v))
              v1
            ,
            Run.repeat1
              (fun v -> trans_vid (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_longvid ((kind, body) : mt) : CST.longvid =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_strid (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v0
            ,
            trans_vid (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_strid_strexp ((kind, body) : mt) : CST.strid_strexp =
  match body with
  | Children v ->
      trans_longstrid (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_sharing_spec ((kind, body) : mt) : CST.sharing_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.nothing v1,
            Run.nothing v2,
            trans_longstrid (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4),
            trans_longstrid (Run.matcher_token v5),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_longstrid (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_open_dec ((kind, body) : mt) : CST.open_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_longstrid (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_atty ((kind, body) : mt) : CST.atty =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tyvar_ty (
            trans_tyvar_ty (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Record_ty (
            trans_record_ty (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Tycon_ty (
            trans_tycon_ty (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ellipsis_tyrow ((kind, body) : mt) : CST.ellipsis_tyrow =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_ty (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fn_ty ((kind, body) : mt) : CST.fn_ty =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Fn_ty_ (
            trans_fn_ty_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Tuple_ty (
            trans_tuple_ty (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fn_ty_ ((kind, body) : mt) : CST.fn_ty_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_tuple_ty (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_fn_ty (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_paren_ty ((kind, body) : mt) : CST.paren_ty =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Paren_ty_ (
            trans_paren_ty_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Atty (
            trans_atty (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_paren_ty_ ((kind, body) : mt) : CST.paren_ty_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_ty (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_record_ty ((kind, body) : mt) : CST.record_ty =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_comma (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Opt_ellips_tyrow_opt_rep1_tok_comma (
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_ellipsis_tyrow (Run.matcher_token v0),
                            Run.opt
                              (fun v ->
                                Run.repeat1
                                  (fun v -> trans_tok_comma (Run.matcher_token v))
                                  v
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | Alt (1, v) ->
                `Tyrow_rep_rep1_tok_comma_tyrow_opt_rep1_tok_comma_ellips_tyrow_opt_rep1_tok_comma (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_tyrow (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_tyrow (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_ellipsis_tyrow (Run.matcher_token v1),
                                  Run.opt
                                    (fun v ->
                                      Run.repeat1
                                        (fun v -> trans_tok_comma (Run.matcher_token v))
                                        v
                                    )
                                    v2
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_ty ((kind, body) : mt) : CST.tuple_ty =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Tuple_ty_ (
            trans_tuple_ty_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Paren_ty (
            trans_paren_ty (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_ty_ ((kind, body) : mt) : CST.tuple_ty_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_paren_ty (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_paren_ty (Run.matcher_token v4),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_paren_ty (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ty ((kind, body) : mt) : CST.ty =
  match body with
  | Children v ->
      trans_fn_ty (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_tycon_ty ((kind, body) : mt) : CST.tycon_ty =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_tyseq (Run.matcher_token v))
              v0
            ,
            trans_longtycon (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tyrow ((kind, body) : mt) : CST.tyrow =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_lab (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_ty (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tyseq ((kind, body) : mt) : CST.tyseq =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Atty (
            trans_atty (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `LPAR_blank_blank_ty_rep_COMMA_ty_RPAR (
            (match v with
            | Seq [v0; v1; v2; v3; v4; v5] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.nothing v1,
                  Run.nothing v2,
                  trans_ty (Run.matcher_token v3),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_ty (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v4
                  ,
                  Run.trans_token (Run.matcher_token v5)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_datarepl_dec ((kind, body) : mt) : CST.datarepl_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_tycon (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_longtycon (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_datarepl_spec ((kind, body) : mt) : CST.datarepl_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_tycon (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_longtycon (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_sharingtype_spec ((kind, body) : mt) : CST.sharingtype_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.nothing v2,
            Run.nothing v3,
            trans_longtycon (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            trans_longtycon (Run.matcher_token v6),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_longtycon (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v7
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_typedesc ((kind, body) : mt) : CST.typedesc =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_typedesc_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_typedesc_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_vid_exp ((kind, body) : mt) : CST.vid_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_longvid (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_vid_pat ((kind, body) : mt) : CST.vid_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_longvid (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_typbind_ ((kind, body) : mt) : CST.typbind_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_tyvarseq (Run.matcher_token v))
              v0
            ,
            trans_tycon (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_ty (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_exdesc_ ((kind, body) : mt) : CST.exdesc_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_vid (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_ty (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_condesc_ ((kind, body) : mt) : CST.condesc_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_vid (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_ty (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_exbind_ ((kind, body) : mt) : CST.exbind_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Opt_op_vid_opt_of_ty (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  trans_vid (Run.matcher_token v1),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_ty (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v2
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Opt_op_vid_EQ_opt_op_long (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v0
                  ,
                  trans_vid (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2),
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v3
                  ,
                  trans_longvid (Run.matcher_token v4)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_labvar_exprow ((kind, body) : mt) : CST.labvar_exprow =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_vid (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_ty (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_valdesc_ ((kind, body) : mt) : CST.valdesc_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_vid (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_ty (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_conbind_ ((kind, body) : mt) : CST.conbind_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            trans_vid (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_ty (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_eqtype_spec ((kind, body) : mt) : CST.eqtype_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_typedesc (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_app_pat ((kind, body) : mt) : CST.app_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_atpat (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_atpat (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_atpat ((kind, body) : mt) : CST.atpat =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_wild_pat (
            (match v with
            | Alt (0, v) ->
                `Wild_pat (
                  trans_wildcard_pat (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scon_pat (
                  trans_scon_pat (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Vid_pat (
                  trans_vid_pat (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Record_pat (
                  trans_record_pat (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Unit_pat (
                  trans_unit_pat (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Tuple_pat (
                  trans_tuple_pat (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `List_pat (
                  trans_list_pat (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Vec_pat (
                  trans_vec_pat (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Paren_pat (
                  trans_paren_pat (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_conj_pat ((kind, body) : mt) : CST.conj_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pat (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_disj_pat ((kind, body) : mt) : CST.disj_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pat (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ellipsis_listpat ((kind, body) : mt) : CST.ellipsis_listpat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pat (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ellipsis_patrow ((kind, body) : mt) : CST.ellipsis_patrow =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_pat (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_labvar_patrow ((kind, body) : mt) : CST.labvar_patrow =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_vid (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_ty (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_pat (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_pat ((kind, body) : mt) : CST.list_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_comma (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Opt_ellips_list_opt_rep1_tok_comma (
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_ellipsis_listpat (Run.matcher_token v0),
                            Run.opt
                              (fun v ->
                                Run.repeat1
                                  (fun v -> trans_tok_comma (Run.matcher_token v))
                                  v
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | Alt (1, v) ->
                `Pat_rep_rep1_tok_comma_pat_opt_rep1_tok_comma_ellips_list_opt_rep1_tok_comma (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_pat (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_pat (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_ellipsis_listpat (Run.matcher_token v1),
                                  Run.opt
                                    (fun v ->
                                      Run.repeat1
                                        (fun v -> trans_tok_comma (Run.matcher_token v))
                                        v
                                    )
                                    v2
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_paren_pat ((kind, body) : mt) : CST.paren_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pat (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pat ((kind, body) : mt) : CST.pat =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Atpat (
            trans_atpat (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `App_pat (
            trans_app_pat (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Typed_pat (
            trans_typed_pat (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Conj_pat (
            trans_conj_pat (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Disj_pat (
            trans_disj_pat (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_patrow ((kind, body) : mt) : CST.patrow =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Patrow_ (
            trans_patrow_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Labvar_patrow (
            trans_labvar_patrow (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_patrow_ ((kind, body) : mt) : CST.patrow_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_lab (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_pat (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_record_pat ((kind, body) : mt) : CST.record_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_comma (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Opt_ellips_patrow_opt_rep1_tok_comma (
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_ellipsis_patrow (Run.matcher_token v0),
                            Run.opt
                              (fun v ->
                                Run.repeat1
                                  (fun v -> trans_tok_comma (Run.matcher_token v))
                                  v
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | Alt (1, v) ->
                `Patrow_rep_rep1_tok_comma_patrow_opt_rep1_tok_comma_ellips_patrow_opt_rep1_tok_comma (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_patrow (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_patrow (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_ellipsis_patrow (Run.matcher_token v1),
                                  Run.opt
                                    (fun v ->
                                      Run.repeat1
                                        (fun v -> trans_tok_comma (Run.matcher_token v))
                                        v
                                    )
                                    v2
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_pat ((kind, body) : mt) : CST.tuple_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_comma (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Blank (
                  Run.nothing v
                )
            | Alt (1, v) ->
                `Pat_rep_rep1_tok_comma_pat_opt_rep1_tok_comma (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_pat (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_pat (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            Run.repeat1
                              (fun v -> trans_tok_comma (Run.matcher_token v))
                              v
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed_pat ((kind, body) : mt) : CST.typed_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_ty (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_vec_pat ((kind, body) : mt) : CST.vec_pat =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_comma (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Blank (
                  Run.nothing v
                )
            | Alt (1, v) ->
                `Pat_rep_rep1_tok_comma_pat_opt_rep1_tok_comma (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_pat (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_pat (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            Run.repeat1
                              (fun v -> trans_tok_comma (Run.matcher_token v))
                              v
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_typbind ((kind, body) : mt) : CST.typbind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_typbind_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_typbind_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_exdesc ((kind, body) : mt) : CST.exdesc =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_exdesc_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_exdesc_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_condesc ((kind, body) : mt) : CST.condesc =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_tok_bar (Run.matcher_token v))
              v0
            ,
            Run.nothing v1,
            Run.nothing v2,
            trans_condesc_ (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_condesc_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_exbind ((kind, body) : mt) : CST.exbind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_exbind_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_exbind_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_valdesc ((kind, body) : mt) : CST.valdesc =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_valdesc_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_valdesc_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_conbind ((kind, body) : mt) : CST.conbind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_tok_bar (Run.matcher_token v))
              v0
            ,
            Run.nothing v1,
            Run.nothing v2,
            trans_conbind_ (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_conbind_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_type_spec ((kind, body) : mt) : CST.type_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Type (
                  trans_typedesc (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Typb (
                  trans_typbind (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_type_dec ((kind, body) : mt) : CST.type_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_typbind (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_exception_spec ((kind, body) : mt) : CST.exception_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_exdesc (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_datdesc_ ((kind, body) : mt) : CST.datdesc_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_tyvarseq (Run.matcher_token v))
              v0
            ,
            trans_tycon (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_condesc (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_exception_dec ((kind, body) : mt) : CST.exception_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_exbind (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_val_spec ((kind, body) : mt) : CST.val_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_valdesc (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_datbind_ ((kind, body) : mt) : CST.datbind_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> trans_tyvarseq (Run.matcher_token v))
              v0
            ,
            trans_tycon (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_conbind (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_datdesc ((kind, body) : mt) : CST.datdesc =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_datdesc_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_datdesc_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_datbind ((kind, body) : mt) : CST.datbind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_datbind_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_datbind_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_datatype_spec ((kind, body) : mt) : CST.datatype_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_datdesc (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_typbind (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_datatype_dec ((kind, body) : mt) : CST.datatype_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_datbind (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_typbind (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_include_spec ((kind, body) : mt) : CST.include_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Sigexp (
                  trans_sigexp (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Sigid_rep1_sigid (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_sigid (Run.matcher_token v0),
                        Run.repeat1
                          (fun v -> trans_sigid (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sig_sigexp ((kind, body) : mt) : CST.sig_sigexp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Spec (
                      trans_spec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sigexp ((kind, body) : mt) : CST.sigexp =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Sig_sigexp (
            trans_sig_sigexp (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Sigid_sigexp (
            trans_sigid_sigexp (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Wher_sigexp (
            trans_wheretype_sigexp (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_spec ((kind, body) : mt) : CST.spec =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_val_spec (
            (match v with
            | Alt (0, v) ->
                `Val_spec (
                  trans_val_spec (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Type_spec (
                  trans_type_spec (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Eqtype_spec (
                  trans_eqtype_spec (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Data_spec_d5fa734 (
                  trans_datatype_spec (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Data_spec_86dd5a7 (
                  trans_datarepl_spec (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Exc_spec (
                  trans_exception_spec (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Stru_spec (
                  trans_structure_spec (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Incl_spec (
                  trans_include_spec (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Shar_spec_5735bb3 (
                  trans_sharingtype_spec (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Shar_spec_a6177ec (
                  trans_sharing_spec (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_strdesc ((kind, body) : mt) : CST.strdesc =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_strdesc_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_strdesc_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_strdesc_ ((kind, body) : mt) : CST.strdesc_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_strid (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_sigexp (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_structure_spec ((kind, body) : mt) : CST.structure_spec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_strdesc (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_wheretype_sigexp ((kind, body) : mt) : CST.wheretype_sigexp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8; v9] ->
          (
            trans_sigexp (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.nothing v2,
            Run.nothing v3,
            Run.trans_token (Run.matcher_token v4),
            Run.opt
              (fun v -> trans_tyvarseq (Run.matcher_token v))
              v5
            ,
            trans_longtycon (Run.matcher_token v6),
            Run.trans_token (Run.matcher_token v7),
            trans_ty (Run.matcher_token v8),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1; v2; v3; v4; v5] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1),
                      Run.opt
                        (fun v -> trans_tyvarseq (Run.matcher_token v))
                        v2
                      ,
                      trans_longtycon (Run.matcher_token v3),
                      Run.trans_token (Run.matcher_token v4),
                      trans_ty (Run.matcher_token v5)
                    )
                | _ -> assert false
                )
              )
              v9
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_abstype_dec ((kind, body) : mt) : CST.abstype_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_datbind (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_typbind (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Dec (
                      trans_dec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_app_exp ((kind, body) : mt) : CST.app_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_atexp (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_atexp (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_atexp ((kind, body) : mt) : CST.atexp =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Scon_exp (
            trans_scon_exp (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Vid_exp (
            trans_vid_exp (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Record_exp (
            trans_record_exp (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Reco_exp (
            trans_recordsel_exp (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Unit_exp (
            trans_unit_exp (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Tuple_exp (
            trans_tuple_exp (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `List_exp (
            trans_list_exp (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Vec_exp (
            trans_vec_exp (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Seq_exp (
            trans_sequence_exp (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Let_exp (
            trans_let_exp (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Paren_exp (
            trans_paren_exp (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case_exp ((kind, body) : mt) : CST.case_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_exp (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_match_ (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_cond_exp ((kind, body) : mt) : CST.cond_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_exp (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_exp (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_exp (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_conj_exp ((kind, body) : mt) : CST.conj_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_exp (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_exp (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dec ((kind, body) : mt) : CST.dec =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Dec_no_local (
            trans_dec_no_local (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Local_dec (
            trans_local_dec (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_dec_no_local ((kind, body) : mt) : CST.dec_no_local =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_do_dec (
            (match v with
            | Alt (0, v) ->
                `Do_dec (
                  trans_do_dec (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Val_dec (
                  trans_val_dec (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Fun_dec (
                  trans_fun_dec (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Type_dec (
                  trans_type_dec (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Data_dec_c9b9a7a (
                  trans_datatype_dec (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Data_dec_4d86b7f (
                  trans_datarepl_dec (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Abst_dec (
                  trans_abstype_dec (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Exc_dec (
                  trans_exception_dec (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `Open_dec (
                  trans_open_dec (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `Infix_dec (
                  trans_infix_dec (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `Infixr_dec (
                  trans_infixr_dec (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Nonfix_dec (
                  trans_nonfix_dec (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_disj_exp ((kind, body) : mt) : CST.disj_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_exp (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_exp (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_dec ((kind, body) : mt) : CST.do_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_exp (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ellipsis_exprow ((kind, body) : mt) : CST.ellipsis_exprow =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_exp (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ellipsis_listexp ((kind, body) : mt) : CST.ellipsis_listexp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_exp (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_exp ((kind, body) : mt) : CST.exp =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Atexp (
            trans_atexp (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `App_exp (
            trans_app_exp (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Typed_exp (
            trans_typed_exp (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Conj_exp (
            trans_conj_exp (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Disj_exp (
            trans_disj_exp (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Handle_exp (
            trans_handle_exp (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Raise_exp (
            trans_raise_exp (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Cond_exp (
            trans_cond_exp (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Iter_exp (
            trans_iter_exp (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Case_exp (
            trans_case_exp (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Fn_exp (
            trans_fn_exp (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_exprow ((kind, body) : mt) : CST.exprow =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exprow_ (
            trans_exprow_ (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Labvar_exprow (
            trans_labvar_exprow (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_exprow_ ((kind, body) : mt) : CST.exprow_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_lab (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_exp (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fmatch ((kind, body) : mt) : CST.fmatch =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_tok_bar (Run.matcher_token v))
              v0
            ,
            Run.nothing v1,
            Run.nothing v2,
            trans_fmrule (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_fmrule (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fmrule ((kind, body) : mt) : CST.fmrule =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Opt_op_vid_rep1_atpat (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.opt
                          (fun v -> Run.trans_token (Run.matcher_token v))
                          v0
                        ,
                        trans_vid (Run.matcher_token v1),
                        Run.repeat1
                          (fun v -> trans_atpat (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `LPAR_atpat_vid_atpat_RPAR_rep_atpat (
                  (match v with
                  | Seq [v0; v1; v2; v3; v4; v5] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_atpat (Run.matcher_token v1),
                        trans_vid (Run.matcher_token v2),
                        trans_atpat (Run.matcher_token v3),
                        Run.trans_token (Run.matcher_token v4),
                        Run.repeat
                          (fun v -> trans_atpat (Run.matcher_token v))
                          v5
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Atpat_vid_atpat (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_atpat (Run.matcher_token v0),
                        trans_vid (Run.matcher_token v1),
                        trans_atpat (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_ty (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_exp (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fn_exp ((kind, body) : mt) : CST.fn_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_match_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fun_dec ((kind, body) : mt) : CST.fun_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_tyvarseq (Run.matcher_token v))
              v1
            ,
            trans_fvalbind (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fvalbind ((kind, body) : mt) : CST.fvalbind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_fvalbind_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_fvalbind_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fvalbind_ ((kind, body) : mt) : CST.fvalbind_ =
  match body with
  | Children v ->
      trans_fmatch (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_handle_exp ((kind, body) : mt) : CST.handle_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_exp (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_match_ (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_iter_exp ((kind, body) : mt) : CST.iter_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_exp (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_exp (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_exp ((kind, body) : mt) : CST.let_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6; v7; v8] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Dec (
                      trans_dec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_semi (Run.matcher_token v))
                  v
              )
              v3
            ,
            Run.nothing v4,
            trans_exp (Run.matcher_token v5),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.repeat1
                        (fun v -> trans_tok_semi (Run.matcher_token v))
                        v0
                      ,
                      trans_exp (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v6
            ,
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_semi (Run.matcher_token v))
                  v
              )
              v7
            ,
            Run.trans_token (Run.matcher_token v8)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_list_exp ((kind, body) : mt) : CST.list_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_comma (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Opt_ellips_list_opt_rep1_tok_comma (
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_ellipsis_listexp (Run.matcher_token v0),
                            Run.opt
                              (fun v ->
                                Run.repeat1
                                  (fun v -> trans_tok_comma (Run.matcher_token v))
                                  v
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | Alt (1, v) ->
                `Exp_rep_rep1_tok_comma_exp_opt_rep1_tok_comma_ellips_list_opt_rep1_tok_comma (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_exp (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_exp (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_ellipsis_listexp (Run.matcher_token v1),
                                  Run.opt
                                    (fun v ->
                                      Run.repeat1
                                        (fun v -> trans_tok_comma (Run.matcher_token v))
                                        v
                                    )
                                    v2
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_dec ((kind, body) : mt) : CST.local_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Dec (
                      trans_dec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Dec (
                      trans_dec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_match_ ((kind, body) : mt) : CST.match_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> trans_tok_bar (Run.matcher_token v))
              v0
            ,
            Run.nothing v1,
            Run.nothing v2,
            trans_mrule (Run.matcher_token v3),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_mrule (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_mrule ((kind, body) : mt) : CST.mrule =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_EQGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_pat (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_exp (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_paren_exp ((kind, body) : mt) : CST.paren_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_exp (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_raise_exp ((kind, body) : mt) : CST.raise_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_exp (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_record_exp ((kind, body) : mt) : CST.record_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_comma (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Opt_ellips_exprow_opt_rep1_tok_comma (
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_ellipsis_exprow (Run.matcher_token v0),
                            Run.opt
                              (fun v ->
                                Run.repeat1
                                  (fun v -> trans_tok_comma (Run.matcher_token v))
                                  v
                              )
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | Alt (1, v) ->
                `Exprow_rep_rep1_tok_comma_exprow_opt_rep1_tok_comma_ellips_exprow_opt_rep1_tok_comma (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_exprow (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_exprow (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            (match v with
                            | Seq [v0; v1; v2] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_ellipsis_exprow (Run.matcher_token v1),
                                  Run.opt
                                    (fun v ->
                                      Run.repeat1
                                        (fun v -> trans_tok_comma (Run.matcher_token v))
                                        v
                                    )
                                    v2
                                )
                            | _ -> assert false
                            )
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sequence_exp ((kind, body) : mt) : CST.sequence_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_semi (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Blank (
                  Run.nothing v
                )
            | Alt (1, v) ->
                `Exp_rep_rep1_tok_semi_exp_opt_rep1_tok_semi (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_exp (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_semi (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_exp (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            Run.repeat1
                              (fun v -> trans_tok_semi (Run.matcher_token v))
                              v
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_tuple_exp ((kind, body) : mt) : CST.tuple_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_comma (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Blank (
                  Run.nothing v
                )
            | Alt (1, v) ->
                `Exp_rep_rep1_tok_comma_exp_opt_rep1_tok_comma (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_exp (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_exp (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            Run.repeat1
                              (fun v -> trans_tok_comma (Run.matcher_token v))
                              v
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_typed_exp ((kind, body) : mt) : CST.typed_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_exp (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_ty (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_val_dec ((kind, body) : mt) : CST.val_dec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_tyvarseq (Run.matcher_token v))
              v2
            ,
            trans_valbind (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_valbind ((kind, body) : mt) : CST.valbind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_valbind_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_valbind_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_valbind_ ((kind, body) : mt) : CST.valbind_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pat (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_exp (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_vec_exp ((kind, body) : mt) : CST.vec_exp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                Run.repeat1
                  (fun v -> trans_tok_comma (Run.matcher_token v))
                  v
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Blank (
                  Run.nothing v
                )
            | Alt (1, v) ->
                `Exp_rep_rep1_tok_comma_exp_opt_rep1_tok_comma (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_exp (Run.matcher_token v0),
                        Run.repeat
                          (fun v ->
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  Run.repeat1
                                    (fun v -> trans_tok_comma (Run.matcher_token v))
                                    v0
                                  ,
                                  trans_exp (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                          v1
                        ,
                        Run.opt
                          (fun v ->
                            Run.repeat1
                              (fun v -> trans_tok_comma (Run.matcher_token v))
                              v
                          )
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_sigbind_ ((kind, body) : mt) : CST.sigbind_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_sigid (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_sigexp (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_constr_strexp ((kind, body) : mt) : CST.constr_strexp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_strexp (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `COLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `COLONGT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_sigexp (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_fctapp_strexp ((kind, body) : mt) : CST.fctapp_strexp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_fctid (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Strexp (
                  trans_strexp (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rep_choice_SEMI (
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `SEMI (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Strdec (
                            trans_strdec (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_let_strexp ((kind, body) : mt) : CST.let_strexp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Strdec (
                      trans_strdec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_strexp (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_local_strdec ((kind, body) : mt) : CST.local_strdec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Strdec (
                      trans_strdec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Strdec (
                      trans_strdec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_strbind ((kind, body) : mt) : CST.strbind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_strbind_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_strbind_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_strbind_ ((kind, body) : mt) : CST.strbind_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_strid (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `COLON (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `COLONGT (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      trans_sigexp (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_strexp (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_strdec ((kind, body) : mt) : CST.strdec =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Dec_no_local (
            trans_dec_no_local (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Stru_strdec (
            trans_structure_strdec (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Local_strdec (
            trans_local_strdec (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_strexp ((kind, body) : mt) : CST.strexp =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Struct_strexp (
            trans_struct_strexp (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Strid_strexp (
            trans_strid_strexp (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Constr_strexp (
            trans_constr_strexp (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Fctapp_strexp (
            trans_fctapp_strexp (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Let_strexp (
            trans_let_strexp (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_struct_strexp ((kind, body) : mt) : CST.struct_strexp =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `SEMI (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Strdec (
                      trans_strdec (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_structure_strdec ((kind, body) : mt) : CST.structure_strdec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_strbind (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_sigbind ((kind, body) : mt) : CST.sigbind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_sigbind_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_sigbind_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_fctbind_ ((kind, body) : mt) : CST.fctbind_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            trans_fctid (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Strid_COLON_sigexp (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        trans_strid (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1),
                        trans_sigexp (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Rep_choice_SEMI (
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `SEMI (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Spec (
                            trans_spec (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `COLON (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `COLONGT (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      trans_sigexp (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            trans_strexp (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_signature_sigdec ((kind, body) : mt) : CST.signature_sigdec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_sigbind (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_fctbind ((kind, body) : mt) : CST.fctbind =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.nothing v0,
            Run.nothing v1,
            trans_fctbind_ (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_fctbind_ (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_sigdec ((kind, body) : mt) : CST.sigdec =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Sign_sigdec (
            trans_signature_sigdec (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_fctdec ((kind, body) : mt) : CST.fctdec =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_fctbind (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_topdec ((kind, body) : mt) : CST.topdec =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Strdec (
            trans_strdec (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Sigdec (
            trans_sigdec (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Fctdec (
            trans_fctdec (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_program ((kind, body) : mt) : CST.program =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Rectype (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Rep1_topdec (
                        Run.repeat1
                          (fun v -> trans_topdec (Run.matcher_token v))
                          v
                      )
                  | Alt (1, v) ->
                      `Exp (
                        trans_exp (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            Run.opt
                              (fun v -> trans_program (Run.matcher_token v))
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_source_file ((kind, body) : mt) : CST.source_file =
  match body with
  | Children v ->
      Run.opt
        (fun v -> trans_program (Run.matcher_token v))
        v
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "block_comment" ->
      (match translate_tree src node trans_block_comment with
      | None -> None
      | Some x -> Some (`Block_comment (Run.get_loc node, x)))
  | "line_comment" ->
      (match translate_tree src node trans_line_comment with
      | None -> None
      | Some x -> Some (`Line_comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_source_file

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

